// source: keys.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.rusk.GenerateKeysRequest', null, global);
goog.exportSymbol('proto.rusk.GenerateKeysResponse', null, global);
goog.exportSymbol('proto.rusk.PublicKey', null, global);
goog.exportSymbol('proto.rusk.SecretKey', null, global);
goog.exportSymbol('proto.rusk.StealthAddress', null, global);
goog.exportSymbol('proto.rusk.ViewKey', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.SecretKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.SecretKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.SecretKey.displayName = 'proto.rusk.SecretKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.ViewKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.ViewKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.ViewKey.displayName = 'proto.rusk.ViewKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.PublicKey.displayName = 'proto.rusk.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.StealthAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.StealthAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.StealthAddress.displayName = 'proto.rusk.StealthAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.GenerateKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.GenerateKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.GenerateKeysRequest.displayName = 'proto.rusk.GenerateKeysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.GenerateKeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.GenerateKeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.GenerateKeysResponse.displayName = 'proto.rusk.GenerateKeysResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.SecretKey.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.SecretKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.SecretKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.SecretKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: msg.getA_asB64(),
    b: msg.getB_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.SecretKey}
 */
proto.rusk.SecretKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.SecretKey;
  return proto.rusk.SecretKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.SecretKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.SecretKey}
 */
proto.rusk.SecretKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.SecretKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.SecretKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.SecretKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.SecretKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getB_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes a = 1;
 * @return {string}
 */
proto.rusk.SecretKey.prototype.getA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes a = 1;
 * This is a type-conversion wrapper around `getA()`
 * @return {string}
 */
proto.rusk.SecretKey.prototype.getA_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA()));
};


/**
 * optional bytes a = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA()`
 * @return {!Uint8Array}
 */
proto.rusk.SecretKey.prototype.getA_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.SecretKey} returns this
 */
proto.rusk.SecretKey.prototype.setA = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes b = 2;
 * @return {string}
 */
proto.rusk.SecretKey.prototype.getB = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes b = 2;
 * This is a type-conversion wrapper around `getB()`
 * @return {string}
 */
proto.rusk.SecretKey.prototype.getB_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getB()));
};


/**
 * optional bytes b = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getB()`
 * @return {!Uint8Array}
 */
proto.rusk.SecretKey.prototype.getB_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getB()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.SecretKey} returns this
 */
proto.rusk.SecretKey.prototype.setB = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.ViewKey.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.ViewKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.ViewKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.ViewKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: msg.getA_asB64(),
    bG: msg.getBG_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.ViewKey}
 */
proto.rusk.ViewKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.ViewKey;
  return proto.rusk.ViewKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.ViewKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.ViewKey}
 */
proto.rusk.ViewKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBG(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.ViewKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.ViewKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.ViewKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.ViewKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBG_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes a = 1;
 * @return {string}
 */
proto.rusk.ViewKey.prototype.getA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes a = 1;
 * This is a type-conversion wrapper around `getA()`
 * @return {string}
 */
proto.rusk.ViewKey.prototype.getA_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA()));
};


/**
 * optional bytes a = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA()`
 * @return {!Uint8Array}
 */
proto.rusk.ViewKey.prototype.getA_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.ViewKey} returns this
 */
proto.rusk.ViewKey.prototype.setA = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes b_g = 2;
 * @return {string}
 */
proto.rusk.ViewKey.prototype.getBG = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes b_g = 2;
 * This is a type-conversion wrapper around `getBG()`
 * @return {string}
 */
proto.rusk.ViewKey.prototype.getBG_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBG()));
};


/**
 * optional bytes b_g = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBG()`
 * @return {!Uint8Array}
 */
proto.rusk.ViewKey.prototype.getBG_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBG()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.ViewKey} returns this
 */
proto.rusk.ViewKey.prototype.setBG = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    aG: msg.getAG_asB64(),
    bG: msg.getBG_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.PublicKey}
 */
proto.rusk.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.PublicKey;
  return proto.rusk.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.PublicKey}
 */
proto.rusk.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAG(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBG(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAG_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBG_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes a_g = 1;
 * @return {string}
 */
proto.rusk.PublicKey.prototype.getAG = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes a_g = 1;
 * This is a type-conversion wrapper around `getAG()`
 * @return {string}
 */
proto.rusk.PublicKey.prototype.getAG_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAG()));
};


/**
 * optional bytes a_g = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAG()`
 * @return {!Uint8Array}
 */
proto.rusk.PublicKey.prototype.getAG_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAG()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.PublicKey} returns this
 */
proto.rusk.PublicKey.prototype.setAG = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes b_g = 2;
 * @return {string}
 */
proto.rusk.PublicKey.prototype.getBG = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes b_g = 2;
 * This is a type-conversion wrapper around `getBG()`
 * @return {string}
 */
proto.rusk.PublicKey.prototype.getBG_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBG()));
};


/**
 * optional bytes b_g = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBG()`
 * @return {!Uint8Array}
 */
proto.rusk.PublicKey.prototype.getBG_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBG()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.PublicKey} returns this
 */
proto.rusk.PublicKey.prototype.setBG = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.StealthAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.StealthAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.StealthAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.StealthAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    rG: msg.getRG_asB64(),
    pkR: msg.getPkR_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.StealthAddress}
 */
proto.rusk.StealthAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.StealthAddress;
  return proto.rusk.StealthAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.StealthAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.StealthAddress}
 */
proto.rusk.StealthAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRG(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkR(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.StealthAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.StealthAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.StealthAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.StealthAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRG_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPkR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes r_g = 1;
 * @return {string}
 */
proto.rusk.StealthAddress.prototype.getRG = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes r_g = 1;
 * This is a type-conversion wrapper around `getRG()`
 * @return {string}
 */
proto.rusk.StealthAddress.prototype.getRG_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRG()));
};


/**
 * optional bytes r_g = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRG()`
 * @return {!Uint8Array}
 */
proto.rusk.StealthAddress.prototype.getRG_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRG()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.StealthAddress} returns this
 */
proto.rusk.StealthAddress.prototype.setRG = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pk_r = 2;
 * @return {string}
 */
proto.rusk.StealthAddress.prototype.getPkR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pk_r = 2;
 * This is a type-conversion wrapper around `getPkR()`
 * @return {string}
 */
proto.rusk.StealthAddress.prototype.getPkR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkR()));
};


/**
 * optional bytes pk_r = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkR()`
 * @return {!Uint8Array}
 */
proto.rusk.StealthAddress.prototype.getPkR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.StealthAddress} returns this
 */
proto.rusk.StealthAddress.prototype.setPkR = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.GenerateKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.GenerateKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.GenerateKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.GenerateKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.GenerateKeysRequest}
 */
proto.rusk.GenerateKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.GenerateKeysRequest;
  return proto.rusk.GenerateKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.GenerateKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.GenerateKeysRequest}
 */
proto.rusk.GenerateKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.GenerateKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.GenerateKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.GenerateKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.GenerateKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.GenerateKeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.GenerateKeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.GenerateKeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.GenerateKeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sk: (f = msg.getSk()) && proto.rusk.SecretKey.toObject(includeInstance, f),
    vk: (f = msg.getVk()) && proto.rusk.ViewKey.toObject(includeInstance, f),
    pk: (f = msg.getPk()) && proto.rusk.PublicKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.GenerateKeysResponse}
 */
proto.rusk.GenerateKeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.GenerateKeysResponse;
  return proto.rusk.GenerateKeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.GenerateKeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.GenerateKeysResponse}
 */
proto.rusk.GenerateKeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rusk.SecretKey;
      reader.readMessage(value,proto.rusk.SecretKey.deserializeBinaryFromReader);
      msg.setSk(value);
      break;
    case 2:
      var value = new proto.rusk.ViewKey;
      reader.readMessage(value,proto.rusk.ViewKey.deserializeBinaryFromReader);
      msg.setVk(value);
      break;
    case 3:
      var value = new proto.rusk.PublicKey;
      reader.readMessage(value,proto.rusk.PublicKey.deserializeBinaryFromReader);
      msg.setPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.GenerateKeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.GenerateKeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.GenerateKeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.GenerateKeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rusk.SecretKey.serializeBinaryToWriter
    );
  }
  f = message.getVk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rusk.ViewKey.serializeBinaryToWriter
    );
  }
  f = message.getPk();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rusk.PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional SecretKey sk = 1;
 * @return {?proto.rusk.SecretKey}
 */
proto.rusk.GenerateKeysResponse.prototype.getSk = function() {
  return /** @type{?proto.rusk.SecretKey} */ (
    jspb.Message.getWrapperField(this, proto.rusk.SecretKey, 1));
};


/**
 * @param {?proto.rusk.SecretKey|undefined} value
 * @return {!proto.rusk.GenerateKeysResponse} returns this
*/
proto.rusk.GenerateKeysResponse.prototype.setSk = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rusk.GenerateKeysResponse} returns this
 */
proto.rusk.GenerateKeysResponse.prototype.clearSk = function() {
  return this.setSk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rusk.GenerateKeysResponse.prototype.hasSk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ViewKey vk = 2;
 * @return {?proto.rusk.ViewKey}
 */
proto.rusk.GenerateKeysResponse.prototype.getVk = function() {
  return /** @type{?proto.rusk.ViewKey} */ (
    jspb.Message.getWrapperField(this, proto.rusk.ViewKey, 2));
};


/**
 * @param {?proto.rusk.ViewKey|undefined} value
 * @return {!proto.rusk.GenerateKeysResponse} returns this
*/
proto.rusk.GenerateKeysResponse.prototype.setVk = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rusk.GenerateKeysResponse} returns this
 */
proto.rusk.GenerateKeysResponse.prototype.clearVk = function() {
  return this.setVk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rusk.GenerateKeysResponse.prototype.hasVk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PublicKey pk = 3;
 * @return {?proto.rusk.PublicKey}
 */
proto.rusk.GenerateKeysResponse.prototype.getPk = function() {
  return /** @type{?proto.rusk.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.rusk.PublicKey, 3));
};


/**
 * @param {?proto.rusk.PublicKey|undefined} value
 * @return {!proto.rusk.GenerateKeysResponse} returns this
*/
proto.rusk.GenerateKeysResponse.prototype.setPk = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rusk.GenerateKeysResponse} returns this
 */
proto.rusk.GenerateKeysResponse.prototype.clearPk = function() {
  return this.setPk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rusk.GenerateKeysResponse.prototype.hasPk = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.rusk);
