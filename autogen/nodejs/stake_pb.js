// source: stake.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var transaction_pb = require('./transaction_pb.js');
goog.object.extend(proto, transaction_pb);
goog.exportSymbol('proto.rusk.FindStakeRequest', null, global);
goog.exportSymbol('proto.rusk.FindStakeResponse', null, global);
goog.exportSymbol('proto.rusk.Stake', null, global);
goog.exportSymbol('proto.rusk.StakeTransactionRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.Stake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.Stake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.Stake.displayName = 'proto.rusk.Stake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.StakeTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.StakeTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.StakeTransactionRequest.displayName = 'proto.rusk.StakeTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.FindStakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rusk.FindStakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.FindStakeRequest.displayName = 'proto.rusk.FindStakeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rusk.FindStakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rusk.FindStakeResponse.repeatedFields_, null);
};
goog.inherits(proto.rusk.FindStakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rusk.FindStakeResponse.displayName = 'proto.rusk.FindStakeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.Stake.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.Stake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.Stake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.Stake.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    eligibility: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.Stake}
 */
proto.rusk.Stake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.Stake;
  return proto.rusk.Stake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.Stake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.Stake}
 */
proto.rusk.Stake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setEligibility(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.Stake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.Stake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.Stake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.Stake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getEligibility();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
};


/**
 * optional fixed64 value = 1;
 * @return {number}
 */
proto.rusk.Stake.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rusk.Stake} returns this
 */
proto.rusk.Stake.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 created_at = 2;
 * @return {number}
 */
proto.rusk.Stake.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rusk.Stake} returns this
 */
proto.rusk.Stake.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 eligibility = 3;
 * @return {number}
 */
proto.rusk.Stake.prototype.getEligibility = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rusk.Stake} returns this
 */
proto.rusk.Stake.prototype.setEligibility = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.StakeTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.StakeTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.StakeTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.StakeTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    publicKeyBls: msg.getPublicKeyBls_asB64(),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.StakeTransactionRequest}
 */
proto.rusk.StakeTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.StakeTransactionRequest;
  return proto.rusk.StakeTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.StakeTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.StakeTransactionRequest}
 */
proto.rusk.StakeTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKeyBls(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setGasLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setGasPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.StakeTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.StakeTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.StakeTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.StakeTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getPublicKeyBls_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getGasPrice();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
};


/**
 * optional fixed64 value = 1;
 * @return {number}
 */
proto.rusk.StakeTransactionRequest.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rusk.StakeTransactionRequest} returns this
 */
proto.rusk.StakeTransactionRequest.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes public_key_bls = 2;
 * @return {string}
 */
proto.rusk.StakeTransactionRequest.prototype.getPublicKeyBls = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes public_key_bls = 2;
 * This is a type-conversion wrapper around `getPublicKeyBls()`
 * @return {string}
 */
proto.rusk.StakeTransactionRequest.prototype.getPublicKeyBls_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKeyBls()));
};


/**
 * optional bytes public_key_bls = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKeyBls()`
 * @return {!Uint8Array}
 */
proto.rusk.StakeTransactionRequest.prototype.getPublicKeyBls_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKeyBls()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.StakeTransactionRequest} returns this
 */
proto.rusk.StakeTransactionRequest.prototype.setPublicKeyBls = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional fixed64 gas_limit = 3;
 * @return {number}
 */
proto.rusk.StakeTransactionRequest.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rusk.StakeTransactionRequest} returns this
 */
proto.rusk.StakeTransactionRequest.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed64 gas_price = 4;
 * @return {number}
 */
proto.rusk.StakeTransactionRequest.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rusk.StakeTransactionRequest} returns this
 */
proto.rusk.StakeTransactionRequest.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.FindStakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.FindStakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.FindStakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.FindStakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pk: msg.getPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.FindStakeRequest}
 */
proto.rusk.FindStakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.FindStakeRequest;
  return proto.rusk.FindStakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.FindStakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.FindStakeRequest}
 */
proto.rusk.FindStakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.FindStakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.FindStakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.FindStakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.FindStakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pk = 1;
 * @return {string}
 */
proto.rusk.FindStakeRequest.prototype.getPk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pk = 1;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.rusk.FindStakeRequest.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.rusk.FindStakeRequest.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rusk.FindStakeRequest} returns this
 */
proto.rusk.FindStakeRequest.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rusk.FindStakeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rusk.FindStakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rusk.FindStakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rusk.FindStakeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.FindStakeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stakesList: jspb.Message.toObjectList(msg.getStakesList(),
    proto.rusk.Stake.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rusk.FindStakeResponse}
 */
proto.rusk.FindStakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rusk.FindStakeResponse;
  return proto.rusk.FindStakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rusk.FindStakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rusk.FindStakeResponse}
 */
proto.rusk.FindStakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rusk.Stake;
      reader.readMessage(value,proto.rusk.Stake.deserializeBinaryFromReader);
      msg.addStakes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rusk.FindStakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rusk.FindStakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rusk.FindStakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rusk.FindStakeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStakesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rusk.Stake.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stake stakes = 1;
 * @return {!Array<!proto.rusk.Stake>}
 */
proto.rusk.FindStakeResponse.prototype.getStakesList = function() {
  return /** @type{!Array<!proto.rusk.Stake>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rusk.Stake, 1));
};


/**
 * @param {!Array<!proto.rusk.Stake>} value
 * @return {!proto.rusk.FindStakeResponse} returns this
*/
proto.rusk.FindStakeResponse.prototype.setStakesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rusk.Stake=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rusk.Stake}
 */
proto.rusk.FindStakeResponse.prototype.addStakes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rusk.Stake, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rusk.FindStakeResponse} returns this
 */
proto.rusk.FindStakeResponse.prototype.clearStakesList = function() {
  return this.setStakesList([]);
};


goog.object.extend(exports, proto.rusk);
