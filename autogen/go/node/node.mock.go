// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "natus",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quisquam",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "ratione",
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  1,
					Timestamp:  850,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  854,
					Type:       5,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  244,
					Type:       4,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  430,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  78,
					Type:       7,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  469,
					Type:       5,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  248,
					Type:       3,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  771,
					Type:       0,
					Obfuscated: true,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 5,
					Id:   "dac0b5ce-e946-4ca1-b03d-c4c2f03219e4",
				},
				&Tx{
					Type: 2,
					Id:   "5cff8cb4-2b7b-4250-9144-4662e18246c3",
				},
				&Tx{
					Type: 2,
					Id:   "2f9dd9ca-2fc7-450b-80dc-b1561aef7f55",
				},
				&Tx{
					Type: 0,
					Id:   "0275c2ee-f8dd-4155-b9e2-bd147fc23424",
				},
				&Tx{
					Type: 7,
					Id:   "d5d3312c-21bc-4fc4-9705-81d94e2b8eb2",
				},
				&Tx{
					Type: 5,
					Id:   "34e27b63-3e26-4dca-b4f6-539d24fbc653",
				},
				&Tx{
					Type: 3,
					Id:   "c40adc8f-54fd-492c-878a-3f61ee7c7afb",
				},
				&Tx{
					Type: 7,
					Id:   "c74e7325-94e1-4afb-89b1-865674aad338",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "saepe",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 728.4728,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "et",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "neque",
		}
	return res, nil
}

type ConfigMock struct{}

func (m *ConfigMock) ChangeLogLevel(ctx context.Context, req *LogLevelRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "excepturi",
		}
	return res, nil
}
