// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reward.proto

package rusk

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BN256Point struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BN256Point) Reset()         { *m = BN256Point{} }
func (m *BN256Point) String() string { return proto.CompactTextString(m) }
func (*BN256Point) ProtoMessage()    {}
func (*BN256Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_9aa76dc13de95b4d, []int{0}
}

func (m *BN256Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BN256Point.Unmarshal(m, b)
}
func (m *BN256Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BN256Point.Marshal(b, m, deterministic)
}
func (m *BN256Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BN256Point.Merge(m, src)
}
func (m *BN256Point) XXX_Size() int {
	return xxx_messageInfo_BN256Point.Size(m)
}
func (m *BN256Point) XXX_DiscardUnknown() {
	xxx_messageInfo_BN256Point.DiscardUnknown(m)
}

var xxx_messageInfo_BN256Point proto.InternalMessageInfo

func (m *BN256Point) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetBalanceResponse struct {
	Balance              uint64   `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBalanceResponse) Reset()         { *m = GetBalanceResponse{} }
func (m *GetBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*GetBalanceResponse) ProtoMessage()    {}
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9aa76dc13de95b4d, []int{1}
}

func (m *GetBalanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBalanceResponse.Unmarshal(m, b)
}
func (m *GetBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBalanceResponse.Marshal(b, m, deterministic)
}
func (m *GetBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceResponse.Merge(m, src)
}
func (m *GetBalanceResponse) XXX_Size() int {
	return xxx_messageInfo_GetBalanceResponse.Size(m)
}
func (m *GetBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceResponse proto.InternalMessageInfo

func (m *GetBalanceResponse) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type GetWithdrawalTimeResponse struct {
	Height               uint64   `protobuf:"fixed64,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWithdrawalTimeResponse) Reset()         { *m = GetWithdrawalTimeResponse{} }
func (m *GetWithdrawalTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawalTimeResponse) ProtoMessage()    {}
func (*GetWithdrawalTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9aa76dc13de95b4d, []int{2}
}

func (m *GetWithdrawalTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWithdrawalTimeResponse.Unmarshal(m, b)
}
func (m *GetWithdrawalTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWithdrawalTimeResponse.Marshal(b, m, deterministic)
}
func (m *GetWithdrawalTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawalTimeResponse.Merge(m, src)
}
func (m *GetWithdrawalTimeResponse) XXX_Size() int {
	return xxx_messageInfo_GetWithdrawalTimeResponse.Size(m)
}
func (m *GetWithdrawalTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawalTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawalTimeResponse proto.InternalMessageInfo

func (m *GetWithdrawalTimeResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*BN256Point)(nil), "rusk.BN256Point")
	proto.RegisterType((*GetBalanceResponse)(nil), "rusk.GetBalanceResponse")
	proto.RegisterType((*GetWithdrawalTimeResponse)(nil), "rusk.GetWithdrawalTimeResponse")
}

func init() { proto.RegisterFile("reward.proto", fileDescriptor_9aa76dc13de95b4d) }

var fileDescriptor_9aa76dc13de95b4d = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0x2d, 0x4f,
	0x2c, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x2a, 0x2d, 0xce, 0x56, 0x52,
	0xe0, 0xe2, 0x72, 0xf2, 0x33, 0x32, 0x35, 0x0b, 0xc8, 0xcf, 0xcc, 0x2b, 0x11, 0x12, 0xe2, 0x62,
	0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95, 0xf4, 0xb8,
	0x84, 0xdc, 0x53, 0x4b, 0x9c, 0x12, 0x73, 0x12, 0xf3, 0x92, 0x53, 0x83, 0x52, 0x8b, 0x0b, 0xf2,
	0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x93, 0x20, 0x42, 0x60, 0xc5, 0x6c, 0x41, 0x30, 0xae,
	0x92, 0x31, 0x97, 0xa4, 0x7b, 0x6a, 0x49, 0x78, 0x66, 0x49, 0x46, 0x4a, 0x51, 0x62, 0x79, 0x62,
	0x4e, 0x48, 0x66, 0x2e, 0x42, 0x9b, 0x18, 0x17, 0x5b, 0x46, 0x6a, 0x66, 0x7a, 0x46, 0x09, 0x54,
	0x17, 0x94, 0x67, 0xd4, 0xc7, 0xc8, 0xc5, 0x16, 0x04, 0x76, 0x9d, 0x90, 0x15, 0x17, 0x17, 0xc2,
	0x3e, 0x21, 0x01, 0x3d, 0x90, 0x33, 0xf5, 0x10, 0x6e, 0x94, 0x92, 0x80, 0x88, 0x60, 0xba, 0x49,
	0x89, 0x41, 0xc8, 0x83, 0x4b, 0x10, 0xc3, 0x6e, 0x2c, 0x46, 0xc8, 0xc3, 0x8d, 0xc0, 0xee, 0x4c,
	0x25, 0x06, 0x27, 0xad, 0x28, 0x8d, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c,
	0xfd, 0x94, 0xd2, 0xe2, 0x6c, 0xdd, 0xbc, 0xd4, 0x92, 0xf2, 0xfc, 0xa2, 0x6c, 0x7d, 0x90, 0x5e,
	0xdd, 0xe2, 0xe4, 0x8c, 0xd4, 0xdc, 0x44, 0x6b, 0x10, 0x3b, 0x89, 0x0d, 0x1c, 0xa0, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x65, 0xb1, 0xfd, 0x60, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RewardClient is the client API for Reward service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RewardClient interface {
	// Get reward balance of the given provisioner.
	GetBalance(ctx context.Context, in *BN256Point, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Get height of the last reward withdrawal of a given provisioner.
	GetWithdrawalTime(ctx context.Context, in *BN256Point, opts ...grpc.CallOption) (*GetWithdrawalTimeResponse, error)
}

type rewardClient struct {
	cc *grpc.ClientConn
}

func NewRewardClient(cc *grpc.ClientConn) RewardClient {
	return &rewardClient{cc}
}

func (c *rewardClient) GetBalance(ctx context.Context, in *BN256Point, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/rusk.Reward/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardClient) GetWithdrawalTime(ctx context.Context, in *BN256Point, opts ...grpc.CallOption) (*GetWithdrawalTimeResponse, error) {
	out := new(GetWithdrawalTimeResponse)
	err := c.cc.Invoke(ctx, "/rusk.Reward/GetWithdrawalTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardServer is the server API for Reward service.
type RewardServer interface {
	// Get reward balance of the given provisioner.
	GetBalance(context.Context, *BN256Point) (*GetBalanceResponse, error)
	// Get height of the last reward withdrawal of a given provisioner.
	GetWithdrawalTime(context.Context, *BN256Point) (*GetWithdrawalTimeResponse, error)
}

// UnimplementedRewardServer can be embedded to have forward compatible implementations.
type UnimplementedRewardServer struct {
}

func (*UnimplementedRewardServer) GetBalance(ctx context.Context, req *BN256Point) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedRewardServer) GetWithdrawalTime(ctx context.Context, req *BN256Point) (*GetWithdrawalTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalTime not implemented")
}

func RegisterRewardServer(s *grpc.Server, srv RewardServer) {
	s.RegisterService(&_Reward_serviceDesc, srv)
}

func _Reward_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BN256Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Reward/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServer).GetBalance(ctx, req.(*BN256Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reward_GetWithdrawalTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BN256Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServer).GetWithdrawalTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Reward/GetWithdrawalTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServer).GetWithdrawalTime(ctx, req.(*BN256Point))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reward_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.Reward",
	HandlerType: (*RewardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _Reward_GetBalance_Handler,
		},
		{
			MethodName: "GetWithdrawalTime",
			Handler:    _Reward_GetWithdrawalTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward.proto",
}
