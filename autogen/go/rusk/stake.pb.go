// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: stake.proto

package rusk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       uint64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Eligibility uint64 `protobuf:"fixed64,2,opt,name=eligibility,proto3" json:"eligibility,omitempty"`
	Reward      uint64 `protobuf:"fixed64,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Counter     uint64 `protobuf:"fixed64,4,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *Stake) Reset() {
	*x = Stake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stake) ProtoMessage() {}

func (x *Stake) ProtoReflect() protoreflect.Message {
	mi := &file_stake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stake.ProtoReflect.Descriptor instead.
func (*Stake) Descriptor() ([]byte, []int) {
	return file_stake_proto_rawDescGZIP(), []int{0}
}

func (x *Stake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Stake) GetEligibility() uint64 {
	if x != nil {
		return x.Eligibility
	}
	return 0
}

func (x *Stake) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *Stake) GetCounter() uint64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type StakeTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        uint64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	PublicKeyBls []byte `protobuf:"bytes,2,opt,name=public_key_bls,json=publicKeyBls,proto3" json:"public_key_bls,omitempty"` // BN256Point
	GasLimit     uint64 `protobuf:"fixed64,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasPrice     uint64 `protobuf:"fixed64,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
}

func (x *StakeTransactionRequest) Reset() {
	*x = StakeTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeTransactionRequest) ProtoMessage() {}

func (x *StakeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeTransactionRequest.ProtoReflect.Descriptor instead.
func (*StakeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_stake_proto_rawDescGZIP(), []int{1}
}

func (x *StakeTransactionRequest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StakeTransactionRequest) GetPublicKeyBls() []byte {
	if x != nil {
		return x.PublicKeyBls
	}
	return nil
}

func (x *StakeTransactionRequest) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *StakeTransactionRequest) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

type FindStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk []byte `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"` // BN256Point
}

func (x *FindStakeRequest) Reset() {
	*x = FindStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindStakeRequest) ProtoMessage() {}

func (x *FindStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindStakeRequest.ProtoReflect.Descriptor instead.
func (*FindStakeRequest) Descriptor() ([]byte, []int) {
	return file_stake_proto_rawDescGZIP(), []int{2}
}

func (x *FindStakeRequest) GetPk() []byte {
	if x != nil {
		return x.Pk
	}
	return nil
}

type FindStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stakes []*Stake `protobuf:"bytes,1,rep,name=stakes,proto3" json:"stakes,omitempty"`
}

func (x *FindStakeResponse) Reset() {
	*x = FindStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindStakeResponse) ProtoMessage() {}

func (x *FindStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindStakeResponse.ProtoReflect.Descriptor instead.
func (*FindStakeResponse) Descriptor() ([]byte, []int) {
	return file_stake_proto_rawDescGZIP(), []int{3}
}

func (x *FindStakeResponse) GetStakes() []*Stake {
	if x != nil {
		return x.Stakes
	}
	return nil
}

var File_stake_proto protoreflect.FileDescriptor

var file_stake_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72,
	0x75, 0x73, 0x6b, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x70, 0x6b, 0x22,
	0x38, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x32, 0x8e, 0x01, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_stake_proto_rawDescOnce sync.Once
	file_stake_proto_rawDescData = file_stake_proto_rawDesc
)

func file_stake_proto_rawDescGZIP() []byte {
	file_stake_proto_rawDescOnce.Do(func() {
		file_stake_proto_rawDescData = protoimpl.X.CompressGZIP(file_stake_proto_rawDescData)
	})
	return file_stake_proto_rawDescData
}

var file_stake_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_stake_proto_goTypes = []interface{}{
	(*Stake)(nil),                   // 0: rusk.Stake
	(*StakeTransactionRequest)(nil), // 1: rusk.StakeTransactionRequest
	(*FindStakeRequest)(nil),        // 2: rusk.FindStakeRequest
	(*FindStakeResponse)(nil),       // 3: rusk.FindStakeResponse
	(*Transaction)(nil),             // 4: rusk.Transaction
}
var file_stake_proto_depIdxs = []int32{
	0, // 0: rusk.FindStakeResponse.stakes:type_name -> rusk.Stake
	1, // 1: rusk.StakeService.NewStake:input_type -> rusk.StakeTransactionRequest
	2, // 2: rusk.StakeService.FindStake:input_type -> rusk.FindStakeRequest
	4, // 3: rusk.StakeService.NewStake:output_type -> rusk.Transaction
	3, // 4: rusk.StakeService.FindStake:output_type -> rusk.FindStakeResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_stake_proto_init() }
func file_stake_proto_init() {
	if File_stake_proto != nil {
		return
	}
	file_transaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stake_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stake_proto_goTypes,
		DependencyIndexes: file_stake_proto_depIdxs,
		MessageInfos:      file_stake_proto_msgTypes,
	}.Build()
	File_stake_proto = out.File
	file_stake_proto_rawDesc = nil
	file_stake_proto_goTypes = nil
	file_stake_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StakeServiceClient is the client API for StakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StakeServiceClient interface {
	// Generate a new Stake transaction.
	NewStake(ctx context.Context, in *StakeTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	// Find all stakes related to a provisioner public key.
	FindStake(ctx context.Context, in *FindStakeRequest, opts ...grpc.CallOption) (*FindStakeResponse, error)
}

type stakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStakeServiceClient(cc grpc.ClientConnInterface) StakeServiceClient {
	return &stakeServiceClient{cc}
}

func (c *stakeServiceClient) NewStake(ctx context.Context, in *StakeTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/rusk.StakeService/NewStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakeServiceClient) FindStake(ctx context.Context, in *FindStakeRequest, opts ...grpc.CallOption) (*FindStakeResponse, error) {
	out := new(FindStakeResponse)
	err := c.cc.Invoke(ctx, "/rusk.StakeService/FindStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StakeServiceServer is the server API for StakeService service.
type StakeServiceServer interface {
	// Generate a new Stake transaction.
	NewStake(context.Context, *StakeTransactionRequest) (*Transaction, error)
	// Find all stakes related to a provisioner public key.
	FindStake(context.Context, *FindStakeRequest) (*FindStakeResponse, error)
}

// UnimplementedStakeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStakeServiceServer struct {
}

func (*UnimplementedStakeServiceServer) NewStake(context.Context, *StakeTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewStake not implemented")
}
func (*UnimplementedStakeServiceServer) FindStake(context.Context, *FindStakeRequest) (*FindStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStake not implemented")
}

func RegisterStakeServiceServer(s *grpc.Server, srv StakeServiceServer) {
	s.RegisterService(&_StakeService_serviceDesc, srv)
}

func _StakeService_NewStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakeServiceServer).NewStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.StakeService/NewStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakeServiceServer).NewStake(ctx, req.(*StakeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakeService_FindStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakeServiceServer).FindStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.StakeService/FindStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakeServiceServer).FindStake(ctx, req.(*FindStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StakeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.StakeService",
	HandlerType: (*StakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewStake",
			Handler:    _StakeService_NewStake_Handler,
		},
		{
			MethodName: "FindStake",
			Handler:    _StakeService_FindStake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stake.proto",
}
