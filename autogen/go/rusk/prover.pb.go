// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: prover.proto

package rusk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A serialized `UnprovenTransaction` from the `dusk-wallet-core` crate.
type ExecuteProverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Utx []byte `protobuf:"bytes,1,opt,name=utx,proto3" json:"utx,omitempty"`
}

func (x *ExecuteProverRequest) Reset() {
	*x = ExecuteProverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteProverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteProverRequest) ProtoMessage() {}

func (x *ExecuteProverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteProverRequest.ProtoReflect.Descriptor instead.
func (*ExecuteProverRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteProverRequest) GetUtx() []byte {
	if x != nil {
		return x.Utx
	}
	return nil
}

// A Plonk proof for the Execute circuit.
type ExecuteProverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *ExecuteProverResponse) Reset() {
	*x = ExecuteProverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteProverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteProverResponse) ProtoMessage() {}

func (x *ExecuteProverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteProverResponse.ProtoReflect.Descriptor instead.
func (*ExecuteProverResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteProverResponse) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// Request a proof for the STCT circuit.
type StctProverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized in sequence:
	// - Fee
	// - Crossover
	// - Crossover value (u64)
	// - Crossover blinder (JubJubScalar)
	// - Contract address (BlsScalar)
	// - Signature
	CircuitInputs []byte `protobuf:"bytes,1,opt,name=circuit_inputs,json=circuitInputs,proto3" json:"circuit_inputs,omitempty"`
}

func (x *StctProverRequest) Reset() {
	*x = StctProverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StctProverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StctProverRequest) ProtoMessage() {}

func (x *StctProverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StctProverRequest.ProtoReflect.Descriptor instead.
func (*StctProverRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{2}
}

func (x *StctProverRequest) GetCircuitInputs() []byte {
	if x != nil {
		return x.CircuitInputs
	}
	return nil
}

// A Plonk proof for the STCT circuit.
type StctProverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *StctProverResponse) Reset() {
	*x = StctProverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StctProverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StctProverResponse) ProtoMessage() {}

func (x *StctProverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StctProverResponse.ProtoReflect.Descriptor instead.
func (*StctProverResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{3}
}

func (x *StctProverResponse) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// Request a proof for the STCO circuit.
type StcoProverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized in sequence:
	// - Value (u64)
	// - r (JubJubScalar)
	// - StcoBlinder (JubJubScalar)
	// - IsPublic (bool as u64 - 0 is false, other is true)
	// - PublicSpendKey
	// - pk_r (JubJubAffine)
	// - Message
	// - Crossover Blinder (JubJubScalar)
	// - Crossover
	// - Fee
	// - Contract address (BlsScalar)
	// - Signature
	CircuitInputs []byte `protobuf:"bytes,1,opt,name=circuit_inputs,json=circuitInputs,proto3" json:"circuit_inputs,omitempty"`
}

func (x *StcoProverRequest) Reset() {
	*x = StcoProverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StcoProverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StcoProverRequest) ProtoMessage() {}

func (x *StcoProverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StcoProverRequest.ProtoReflect.Descriptor instead.
func (*StcoProverRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{4}
}

func (x *StcoProverRequest) GetCircuitInputs() []byte {
	if x != nil {
		return x.CircuitInputs
	}
	return nil
}

// A Plonk proof for the STCO circuit.
type StcoProverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *StcoProverResponse) Reset() {
	*x = StcoProverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StcoProverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StcoProverResponse) ProtoMessage() {}

func (x *StcoProverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StcoProverResponse.ProtoReflect.Descriptor instead.
func (*StcoProverResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{5}
}

func (x *StcoProverResponse) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// Request a proof for the WFCT circuit.
type WfctProverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized in sequence:
	// - Commitment (JubJubAffine)
	// - Value (u64)
	// - Blinder (JubJubScalar)
	CircuitInputs []byte `protobuf:"bytes,1,opt,name=circuit_inputs,json=circuitInputs,proto3" json:"circuit_inputs,omitempty"`
}

func (x *WfctProverRequest) Reset() {
	*x = WfctProverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfctProverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfctProverRequest) ProtoMessage() {}

func (x *WfctProverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfctProverRequest.ProtoReflect.Descriptor instead.
func (*WfctProverRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{6}
}

func (x *WfctProverRequest) GetCircuitInputs() []byte {
	if x != nil {
		return x.CircuitInputs
	}
	return nil
}

// A Plonk proof for the WFCT circuit.
type WfctProverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *WfctProverResponse) Reset() {
	*x = WfctProverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfctProverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfctProverResponse) ProtoMessage() {}

func (x *WfctProverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfctProverResponse.ProtoReflect.Descriptor instead.
func (*WfctProverResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{7}
}

func (x *WfctProverResponse) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// Request a proof for the WFCO circuit.
type WfcoProverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized in sequence:
	// - InputValue (u64)
	// - InputBlinder (JubJubScalar)
	// - InputCommitment (JubJubExtended)
	// - ChangeValue (u64)
	// - ChangeMessage
	// - ChangeBlinder (JubJubScalar)
	// - ChangeR (JubJubScalar)
	// - IsPublic (bool as u64 - 0 is false, other is true)
	// - PublicSpendKey
	// - pk_r (JubJubAffine)
	// - OutputValue (u64)
	// - OutputBlinder (JubJubScalar)
	// - OutputCommitment (JubJubExtended)
	CircuitInputs []byte `protobuf:"bytes,1,opt,name=circuit_inputs,json=circuitInputs,proto3" json:"circuit_inputs,omitempty"`
}

func (x *WfcoProverRequest) Reset() {
	*x = WfcoProverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfcoProverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfcoProverRequest) ProtoMessage() {}

func (x *WfcoProverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfcoProverRequest.ProtoReflect.Descriptor instead.
func (*WfcoProverRequest) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{8}
}

func (x *WfcoProverRequest) GetCircuitInputs() []byte {
	if x != nil {
		return x.CircuitInputs
	}
	return nil
}

// A Plonk proof for the WFCO circuit.
type WfcoProverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *WfcoProverResponse) Reset() {
	*x = WfcoProverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prover_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WfcoProverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WfcoProverResponse) ProtoMessage() {}

func (x *WfcoProverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prover_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WfcoProverResponse.ProtoReflect.Descriptor instead.
func (*WfcoProverResponse) Descriptor() ([]byte, []int) {
	return file_prover_proto_rawDescGZIP(), []int{9}
}

func (x *WfcoProverResponse) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

var File_prover_proto protoreflect.FileDescriptor

var file_prover_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x72, 0x75, 0x73, 0x6b, 0x22, 0x28, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x74, 0x78, 0x22, 0x2d,
	0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x3a, 0x0a,
	0x11, 0x53, 0x74, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x74, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x3a, 0x0a, 0x11, 0x53, 0x74, 0x63, 0x6f, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x74, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x3a, 0x0a,
	0x11, 0x57, 0x66, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x2a, 0x0a, 0x12, 0x57, 0x66, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x3a, 0x0a, 0x11, 0x57, 0x66, 0x63, 0x6f, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x22, 0x2a, 0x0a, 0x12, 0x57, 0x66, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x32, 0xdb, 0x02,
	0x0a, 0x06, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x63, 0x74,
	0x12, 0x17, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x53, 0x74, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x74,
	0x63, 0x6f, 0x12, 0x17, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x63, 0x6f, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x53, 0x74, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x57, 0x66, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x66, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x66, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x57, 0x66, 0x63, 0x6f, 0x12, 0x17, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x66,
	0x63, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x57, 0x66, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_prover_proto_rawDescOnce sync.Once
	file_prover_proto_rawDescData = file_prover_proto_rawDesc
)

func file_prover_proto_rawDescGZIP() []byte {
	file_prover_proto_rawDescOnce.Do(func() {
		file_prover_proto_rawDescData = protoimpl.X.CompressGZIP(file_prover_proto_rawDescData)
	})
	return file_prover_proto_rawDescData
}

var file_prover_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_prover_proto_goTypes = []interface{}{
	(*ExecuteProverRequest)(nil),  // 0: rusk.ExecuteProverRequest
	(*ExecuteProverResponse)(nil), // 1: rusk.ExecuteProverResponse
	(*StctProverRequest)(nil),     // 2: rusk.StctProverRequest
	(*StctProverResponse)(nil),    // 3: rusk.StctProverResponse
	(*StcoProverRequest)(nil),     // 4: rusk.StcoProverRequest
	(*StcoProverResponse)(nil),    // 5: rusk.StcoProverResponse
	(*WfctProverRequest)(nil),     // 6: rusk.WfctProverRequest
	(*WfctProverResponse)(nil),    // 7: rusk.WfctProverResponse
	(*WfcoProverRequest)(nil),     // 8: rusk.WfcoProverRequest
	(*WfcoProverResponse)(nil),    // 9: rusk.WfcoProverResponse
}
var file_prover_proto_depIdxs = []int32{
	0, // 0: rusk.Prover.ProveExecute:input_type -> rusk.ExecuteProverRequest
	2, // 1: rusk.Prover.ProveStct:input_type -> rusk.StctProverRequest
	4, // 2: rusk.Prover.ProveStco:input_type -> rusk.StcoProverRequest
	6, // 3: rusk.Prover.ProveWfct:input_type -> rusk.WfctProverRequest
	8, // 4: rusk.Prover.ProveWfco:input_type -> rusk.WfcoProverRequest
	1, // 5: rusk.Prover.ProveExecute:output_type -> rusk.ExecuteProverResponse
	3, // 6: rusk.Prover.ProveStct:output_type -> rusk.StctProverResponse
	5, // 7: rusk.Prover.ProveStco:output_type -> rusk.StcoProverResponse
	7, // 8: rusk.Prover.ProveWfct:output_type -> rusk.WfctProverResponse
	9, // 9: rusk.Prover.ProveWfco:output_type -> rusk.WfcoProverResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_prover_proto_init() }
func file_prover_proto_init() {
	if File_prover_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prover_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteProverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteProverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StctProverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StctProverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StcoProverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StcoProverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfctProverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfctProverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfcoProverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prover_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WfcoProverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prover_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prover_proto_goTypes,
		DependencyIndexes: file_prover_proto_depIdxs,
		MessageInfos:      file_prover_proto_msgTypes,
	}.Build()
	File_prover_proto = out.File
	file_prover_proto_rawDesc = nil
	file_prover_proto_goTypes = nil
	file_prover_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProverClient is the client API for Prover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProverClient interface {
	// Proves the unproven transaction by generating a Plonk proof of the
	// appropriate circuit.
	ProveExecute(ctx context.Context, in *ExecuteProverRequest, opts ...grpc.CallOption) (*ExecuteProverResponse, error)
	// Send to contract transparent proof request.
	ProveStct(ctx context.Context, in *StctProverRequest, opts ...grpc.CallOption) (*StctProverResponse, error)
	// Send to contract obfuscated proof request.
	ProveStco(ctx context.Context, in *StcoProverRequest, opts ...grpc.CallOption) (*StcoProverResponse, error)
	// Withdraw from contract transparent request.
	ProveWfct(ctx context.Context, in *WfctProverRequest, opts ...grpc.CallOption) (*WfctProverResponse, error)
	// Withdraw from contract obfuscated request.
	ProveWfco(ctx context.Context, in *WfcoProverRequest, opts ...grpc.CallOption) (*WfcoProverResponse, error)
}

type proverClient struct {
	cc grpc.ClientConnInterface
}

func NewProverClient(cc grpc.ClientConnInterface) ProverClient {
	return &proverClient{cc}
}

func (c *proverClient) ProveExecute(ctx context.Context, in *ExecuteProverRequest, opts ...grpc.CallOption) (*ExecuteProverResponse, error) {
	out := new(ExecuteProverResponse)
	err := c.cc.Invoke(ctx, "/rusk.Prover/ProveExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverClient) ProveStct(ctx context.Context, in *StctProverRequest, opts ...grpc.CallOption) (*StctProverResponse, error) {
	out := new(StctProverResponse)
	err := c.cc.Invoke(ctx, "/rusk.Prover/ProveStct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverClient) ProveStco(ctx context.Context, in *StcoProverRequest, opts ...grpc.CallOption) (*StcoProverResponse, error) {
	out := new(StcoProverResponse)
	err := c.cc.Invoke(ctx, "/rusk.Prover/ProveStco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverClient) ProveWfct(ctx context.Context, in *WfctProverRequest, opts ...grpc.CallOption) (*WfctProverResponse, error) {
	out := new(WfctProverResponse)
	err := c.cc.Invoke(ctx, "/rusk.Prover/ProveWfct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverClient) ProveWfco(ctx context.Context, in *WfcoProverRequest, opts ...grpc.CallOption) (*WfcoProverResponse, error) {
	out := new(WfcoProverResponse)
	err := c.cc.Invoke(ctx, "/rusk.Prover/ProveWfco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProverServer is the server API for Prover service.
type ProverServer interface {
	// Proves the unproven transaction by generating a Plonk proof of the
	// appropriate circuit.
	ProveExecute(context.Context, *ExecuteProverRequest) (*ExecuteProverResponse, error)
	// Send to contract transparent proof request.
	ProveStct(context.Context, *StctProverRequest) (*StctProverResponse, error)
	// Send to contract obfuscated proof request.
	ProveStco(context.Context, *StcoProverRequest) (*StcoProverResponse, error)
	// Withdraw from contract transparent request.
	ProveWfct(context.Context, *WfctProverRequest) (*WfctProverResponse, error)
	// Withdraw from contract obfuscated request.
	ProveWfco(context.Context, *WfcoProverRequest) (*WfcoProverResponse, error)
}

// UnimplementedProverServer can be embedded to have forward compatible implementations.
type UnimplementedProverServer struct {
}

func (*UnimplementedProverServer) ProveExecute(context.Context, *ExecuteProverRequest) (*ExecuteProverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveExecute not implemented")
}
func (*UnimplementedProverServer) ProveStct(context.Context, *StctProverRequest) (*StctProverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveStct not implemented")
}
func (*UnimplementedProverServer) ProveStco(context.Context, *StcoProverRequest) (*StcoProverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveStco not implemented")
}
func (*UnimplementedProverServer) ProveWfct(context.Context, *WfctProverRequest) (*WfctProverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveWfct not implemented")
}
func (*UnimplementedProverServer) ProveWfco(context.Context, *WfcoProverRequest) (*WfcoProverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveWfco not implemented")
}

func RegisterProverServer(s *grpc.Server, srv ProverServer) {
	s.RegisterService(&_Prover_serviceDesc, srv)
}

func _Prover_ProveExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteProverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).ProveExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Prover/ProveExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).ProveExecute(ctx, req.(*ExecuteProverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prover_ProveStct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StctProverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).ProveStct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Prover/ProveStct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).ProveStct(ctx, req.(*StctProverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prover_ProveStco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StcoProverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).ProveStco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Prover/ProveStco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).ProveStco(ctx, req.(*StcoProverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prover_ProveWfct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfctProverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).ProveWfct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Prover/ProveWfct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).ProveWfct(ctx, req.(*WfctProverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prover_ProveWfco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WfcoProverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).ProveWfco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.Prover/ProveWfco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).ProveWfco(ctx, req.(*WfcoProverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Prover_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.Prover",
	HandlerType: (*ProverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProveExecute",
			Handler:    _Prover_ProveExecute_Handler,
		},
		{
			MethodName: "ProveStct",
			Handler:    _Prover_ProveStct_Handler,
		},
		{
			MethodName: "ProveStco",
			Handler:    _Prover_ProveStco_Handler,
		},
		{
			MethodName: "ProveWfct",
			Handler:    _Prover_ProveWfct_Handler,
		},
		{
			MethodName: "ProveWfco",
			Handler:    _Prover_ProveWfco_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prover.proto",
}
