// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: state.proto

package rusk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecuteStateTransitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs           []*Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	BlockGasLimit uint64         `protobuf:"fixed64,2,opt,name=block_gas_limit,json=blockGasLimit,proto3" json:"block_gas_limit,omitempty"`
	BlockHeight   uint64         `protobuf:"fixed64,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *ExecuteStateTransitionRequest) Reset() {
	*x = ExecuteStateTransitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteStateTransitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStateTransitionRequest) ProtoMessage() {}

func (x *ExecuteStateTransitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStateTransitionRequest.ProtoReflect.Descriptor instead.
func (*ExecuteStateTransitionRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteStateTransitionRequest) GetTxs() []*Transaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *ExecuteStateTransitionRequest) GetBlockGasLimit() uint64 {
	if x != nil {
		return x.BlockGasLimit
	}
	return 0
}

func (x *ExecuteStateTransitionRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type ExecuteStateTransitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Txs       []*Transaction `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	StateRoot []byte         `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
}

func (x *ExecuteStateTransitionResponse) Reset() {
	*x = ExecuteStateTransitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteStateTransitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStateTransitionResponse) ProtoMessage() {}

func (x *ExecuteStateTransitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStateTransitionResponse.ProtoReflect.Descriptor instead.
func (*ExecuteStateTransitionResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteStateTransitionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecuteStateTransitionResponse) GetTxs() []*Transaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *ExecuteStateTransitionResponse) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

type VerifyStateTransitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs           []*Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	BlockGasLimit uint64         `protobuf:"fixed64,2,opt,name=block_gas_limit,json=blockGasLimit,proto3" json:"block_gas_limit,omitempty"`
	BlockHeight   uint64         `protobuf:"fixed64,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *VerifyStateTransitionRequest) Reset() {
	*x = VerifyStateTransitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyStateTransitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyStateTransitionRequest) ProtoMessage() {}

func (x *VerifyStateTransitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyStateTransitionRequest.ProtoReflect.Descriptor instead.
func (*VerifyStateTransitionRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyStateTransitionRequest) GetTxs() []*Transaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *VerifyStateTransitionRequest) GetBlockGasLimit() uint64 {
	if x != nil {
		return x.BlockGasLimit
	}
	return 0
}

func (x *VerifyStateTransitionRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type VerifyStateTransitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *VerifyStateTransitionResponse) Reset() {
	*x = VerifyStateTransitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyStateTransitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyStateTransitionResponse) ProtoMessage() {}

func (x *VerifyStateTransitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyStateTransitionResponse.ProtoReflect.Descriptor instead.
func (*VerifyStateTransitionResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyStateTransitionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetProvisionersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProvisionersRequest) Reset() {
	*x = GetProvisionersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProvisionersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProvisionersRequest) ProtoMessage() {}

func (x *GetProvisionersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProvisionersRequest.ProtoReflect.Descriptor instead.
func (*GetProvisionersRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{4}
}

type GetProvisionersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provisioners []*Provisioner `protobuf:"bytes,1,rep,name=provisioners,proto3" json:"provisioners,omitempty"`
}

func (x *GetProvisionersResponse) Reset() {
	*x = GetProvisionersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProvisionersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProvisionersResponse) ProtoMessage() {}

func (x *GetProvisionersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProvisionersResponse.ProtoReflect.Descriptor instead.
func (*GetProvisionersResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{5}
}

func (x *GetProvisionersResponse) GetProvisioners() []*Provisioner {
	if x != nil {
		return x.Provisioners
	}
	return nil
}

type GetStateRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStateRootRequest) Reset() {
	*x = GetStateRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRootRequest) ProtoMessage() {}

func (x *GetStateRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRootRequest.ProtoReflect.Descriptor instead.
func (*GetStateRootRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{6}
}

type GetStateRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateRoot []byte `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
}

func (x *GetStateRootResponse) Reset() {
	*x = GetStateRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRootResponse) ProtoMessage() {}

func (x *GetStateRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRootResponse.ProtoReflect.Descriptor instead.
func (*GetStateRootResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{7}
}

func (x *GetStateRootResponse) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

type GetNotesOwnedByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Vk     []byte `protobuf:"bytes,2,opt,name=vk,proto3" json:"vk,omitempty"`
}

func (x *GetNotesOwnedByRequest) Reset() {
	*x = GetNotesOwnedByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotesOwnedByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotesOwnedByRequest) ProtoMessage() {}

func (x *GetNotesOwnedByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotesOwnedByRequest.ProtoReflect.Descriptor instead.
func (*GetNotesOwnedByRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{8}
}

func (x *GetNotesOwnedByRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetNotesOwnedByRequest) GetVk() []byte {
	if x != nil {
		return x.Vk
	}
	return nil
}

type GetNotesOwnedByResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes [][]byte `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *GetNotesOwnedByResponse) Reset() {
	*x = GetNotesOwnedByResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotesOwnedByResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotesOwnedByResponse) ProtoMessage() {}

func (x *GetNotesOwnedByResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotesOwnedByResponse.ProtoReflect.Descriptor instead.
func (*GetNotesOwnedByResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{9}
}

func (x *GetNotesOwnedByResponse) GetNotes() [][]byte {
	if x != nil {
		return x.Notes
	}
	return nil
}

type GetAnchorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAnchorRequest) Reset() {
	*x = GetAnchorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnchorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnchorRequest) ProtoMessage() {}

func (x *GetAnchorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnchorRequest.ProtoReflect.Descriptor instead.
func (*GetAnchorRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{10}
}

type GetAnchorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor []byte `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"` // BlsScalar
}

func (x *GetAnchorResponse) Reset() {
	*x = GetAnchorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnchorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnchorResponse) ProtoMessage() {}

func (x *GetAnchorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnchorResponse.ProtoReflect.Descriptor instead.
func (*GetAnchorResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{11}
}

func (x *GetAnchorResponse) GetAnchor() []byte {
	if x != nil {
		return x.Anchor
	}
	return nil
}

type GetOpeningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note []byte `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *GetOpeningRequest) Reset() {
	*x = GetOpeningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpeningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpeningRequest) ProtoMessage() {}

func (x *GetOpeningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpeningRequest.ProtoReflect.Descriptor instead.
func (*GetOpeningRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{12}
}

func (x *GetOpeningRequest) GetNote() []byte {
	if x != nil {
		return x.Note
	}
	return nil
}

type GetOpeningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch []byte `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"` // PoseidonBranch<POSEIDON_TREE_DEPTH>
}

func (x *GetOpeningResponse) Reset() {
	*x = GetOpeningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpeningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpeningResponse) ProtoMessage() {}

func (x *GetOpeningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpeningResponse.ProtoReflect.Descriptor instead.
func (*GetOpeningResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{13}
}

func (x *GetOpeningResponse) GetBranch() []byte {
	if x != nil {
		return x.Branch
	}
	return nil
}

type GetStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk []byte `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"` // PublicKey
}

func (x *GetStakeRequest) Reset() {
	*x = GetStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakeRequest) ProtoMessage() {}

func (x *GetStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakeRequest.ProtoReflect.Descriptor instead.
func (*GetStakeRequest) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{14}
}

func (x *GetStakeRequest) GetPk() []byte {
	if x != nil {
		return x.Pk
	}
	return nil
}

type GetStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake      uint64 `protobuf:"fixed64,1,opt,name=stake,proto3" json:"stake,omitempty"`
	Expiration uint32 `protobuf:"fixed32,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *GetStakeResponse) Reset() {
	*x = GetStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakeResponse) ProtoMessage() {}

func (x *GetStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakeResponse.ProtoReflect.Descriptor instead.
func (*GetStakeResponse) Descriptor() ([]byte, []int) {
	return file_state_proto_rawDescGZIP(), []int{15}
}

func (x *GetStakeResponse) GetStake() uint64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *GetStakeResponse) GetExpiration() uint32 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

var File_state_proto protoreflect.FileDescriptor

var file_state_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72,
	0x75, 0x73, 0x6b, 0x1a, 0x0a, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x7e, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x39, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x15, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x40, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x76, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x76, 0x6b, 0x22, 0x2f, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x12, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x27,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x70, 0x6b, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0xe0, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x45, 0x63, 0x68, 0x6f, 0x12, 0x11, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72,
	0x75, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x72, 0x75, 0x73, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x23, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x75, 0x73, 0x6b,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x75, 0x73,
	0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x12, 0x16, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x75, 0x73,
	0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72,
	0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x15, 0x2e, 0x72, 0x75, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x75,
	0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_state_proto_rawDescOnce sync.Once
	file_state_proto_rawDescData = file_state_proto_rawDesc
)

func file_state_proto_rawDescGZIP() []byte {
	file_state_proto_rawDescOnce.Do(func() {
		file_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_state_proto_rawDescData)
	})
	return file_state_proto_rawDescData
}

var file_state_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_state_proto_goTypes = []interface{}{
	(*ExecuteStateTransitionRequest)(nil),  // 0: rusk.ExecuteStateTransitionRequest
	(*ExecuteStateTransitionResponse)(nil), // 1: rusk.ExecuteStateTransitionResponse
	(*VerifyStateTransitionRequest)(nil),   // 2: rusk.VerifyStateTransitionRequest
	(*VerifyStateTransitionResponse)(nil),  // 3: rusk.VerifyStateTransitionResponse
	(*GetProvisionersRequest)(nil),         // 4: rusk.GetProvisionersRequest
	(*GetProvisionersResponse)(nil),        // 5: rusk.GetProvisionersResponse
	(*GetStateRootRequest)(nil),            // 6: rusk.GetStateRootRequest
	(*GetStateRootResponse)(nil),           // 7: rusk.GetStateRootResponse
	(*GetNotesOwnedByRequest)(nil),         // 8: rusk.GetNotesOwnedByRequest
	(*GetNotesOwnedByResponse)(nil),        // 9: rusk.GetNotesOwnedByResponse
	(*GetAnchorRequest)(nil),               // 10: rusk.GetAnchorRequest
	(*GetAnchorResponse)(nil),              // 11: rusk.GetAnchorResponse
	(*GetOpeningRequest)(nil),              // 12: rusk.GetOpeningRequest
	(*GetOpeningResponse)(nil),             // 13: rusk.GetOpeningResponse
	(*GetStakeRequest)(nil),                // 14: rusk.GetStakeRequest
	(*GetStakeResponse)(nil),               // 15: rusk.GetStakeResponse
	(*Transaction)(nil),                    // 16: rusk.Transaction
	(*Provisioner)(nil),                    // 17: rusk.Provisioner
	(*EchoRequest)(nil),                    // 18: rusk.EchoRequest
	(*EchoResponse)(nil),                   // 19: rusk.EchoResponse
}
var file_state_proto_depIdxs = []int32{
	16, // 0: rusk.ExecuteStateTransitionRequest.txs:type_name -> rusk.Transaction
	16, // 1: rusk.ExecuteStateTransitionResponse.txs:type_name -> rusk.Transaction
	16, // 2: rusk.VerifyStateTransitionRequest.txs:type_name -> rusk.Transaction
	17, // 3: rusk.GetProvisionersResponse.provisioners:type_name -> rusk.Provisioner
	18, // 4: rusk.State.Echo:input_type -> rusk.EchoRequest
	0,  // 5: rusk.State.ExecuteStateTransition:input_type -> rusk.ExecuteStateTransitionRequest
	2,  // 6: rusk.State.VerifyStateTransition:input_type -> rusk.VerifyStateTransitionRequest
	0,  // 7: rusk.State.Accept:input_type -> rusk.ExecuteStateTransitionRequest
	0,  // 8: rusk.State.Finalize:input_type -> rusk.ExecuteStateTransitionRequest
	4,  // 9: rusk.State.GetProvisioners:input_type -> rusk.GetProvisionersRequest
	6,  // 10: rusk.State.GetStateRoot:input_type -> rusk.GetStateRootRequest
	8,  // 11: rusk.State.GetNotesOwnedBy:input_type -> rusk.GetNotesOwnedByRequest
	10, // 12: rusk.State.GetAnchor:input_type -> rusk.GetAnchorRequest
	12, // 13: rusk.State.GetOpening:input_type -> rusk.GetOpeningRequest
	14, // 14: rusk.State.GetStake:input_type -> rusk.GetStakeRequest
	19, // 15: rusk.State.Echo:output_type -> rusk.EchoResponse
	1,  // 16: rusk.State.ExecuteStateTransition:output_type -> rusk.ExecuteStateTransitionResponse
	3,  // 17: rusk.State.VerifyStateTransition:output_type -> rusk.VerifyStateTransitionResponse
	1,  // 18: rusk.State.Accept:output_type -> rusk.ExecuteStateTransitionResponse
	1,  // 19: rusk.State.Finalize:output_type -> rusk.ExecuteStateTransitionResponse
	5,  // 20: rusk.State.GetProvisioners:output_type -> rusk.GetProvisionersResponse
	7,  // 21: rusk.State.GetStateRoot:output_type -> rusk.GetStateRootResponse
	9,  // 22: rusk.State.GetNotesOwnedBy:output_type -> rusk.GetNotesOwnedByResponse
	11, // 23: rusk.State.GetAnchor:output_type -> rusk.GetAnchorResponse
	13, // 24: rusk.State.GetOpening:output_type -> rusk.GetOpeningResponse
	15, // 25: rusk.State.GetStake:output_type -> rusk.GetStakeResponse
	15, // [15:26] is the sub-list for method output_type
	4,  // [4:15] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_state_proto_init() }
func file_state_proto_init() {
	if File_state_proto != nil {
		return
	}
	file_echo_proto_init()
	file_network_proto_init()
	file_prover_proto_init()
	file_provisioner_proto_init()
	file_transaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteStateTransitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteStateTransitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyStateTransitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyStateTransitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProvisionersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProvisionersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotesOwnedByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotesOwnedByResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnchorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAnchorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpeningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpeningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_state_proto_goTypes,
		DependencyIndexes: file_state_proto_depIdxs,
		MessageInfos:      file_state_proto_msgTypes,
	}.Build()
	File_state_proto = out.File
	file_state_proto_rawDesc = nil
	file_state_proto_goTypes = nil
	file_state_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	ExecuteStateTransition(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error)
	VerifyStateTransition(ctx context.Context, in *VerifyStateTransitionRequest, opts ...grpc.CallOption) (*VerifyStateTransitionResponse, error)
	Accept(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error)
	Finalize(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error)
	GetProvisioners(ctx context.Context, in *GetProvisionersRequest, opts ...grpc.CallOption) (*GetProvisionersResponse, error)
	GetStateRoot(ctx context.Context, in *GetStateRootRequest, opts ...grpc.CallOption) (*GetStateRootResponse, error)
	GetNotesOwnedBy(ctx context.Context, in *GetNotesOwnedByRequest, opts ...grpc.CallOption) (*GetNotesOwnedByResponse, error)
	GetAnchor(ctx context.Context, in *GetAnchorRequest, opts ...grpc.CallOption) (*GetAnchorResponse, error)
	GetOpening(ctx context.Context, in *GetOpeningRequest, opts ...grpc.CallOption) (*GetOpeningResponse, error)
	GetStake(ctx context.Context, in *GetStakeRequest, opts ...grpc.CallOption) (*GetStakeResponse, error)
}

type stateClient struct {
	cc grpc.ClientConnInterface
}

func NewStateClient(cc grpc.ClientConnInterface) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) ExecuteStateTransition(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error) {
	out := new(ExecuteStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/ExecuteStateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) VerifyStateTransition(ctx context.Context, in *VerifyStateTransitionRequest, opts ...grpc.CallOption) (*VerifyStateTransitionResponse, error) {
	out := new(VerifyStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/VerifyStateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) Accept(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error) {
	out := new(ExecuteStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) Finalize(ctx context.Context, in *ExecuteStateTransitionRequest, opts ...grpc.CallOption) (*ExecuteStateTransitionResponse, error) {
	out := new(ExecuteStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetProvisioners(ctx context.Context, in *GetProvisionersRequest, opts ...grpc.CallOption) (*GetProvisionersResponse, error) {
	out := new(GetProvisionersResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/GetProvisioners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetStateRoot(ctx context.Context, in *GetStateRootRequest, opts ...grpc.CallOption) (*GetStateRootResponse, error) {
	out := new(GetStateRootResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/GetStateRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetNotesOwnedBy(ctx context.Context, in *GetNotesOwnedByRequest, opts ...grpc.CallOption) (*GetNotesOwnedByResponse, error) {
	out := new(GetNotesOwnedByResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/GetNotesOwnedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetAnchor(ctx context.Context, in *GetAnchorRequest, opts ...grpc.CallOption) (*GetAnchorResponse, error) {
	out := new(GetAnchorResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/GetAnchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetOpening(ctx context.Context, in *GetOpeningRequest, opts ...grpc.CallOption) (*GetOpeningResponse, error) {
	out := new(GetOpeningResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/GetOpening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetStake(ctx context.Context, in *GetStakeRequest, opts ...grpc.CallOption) (*GetStakeResponse, error) {
	out := new(GetStakeResponse)
	err := c.cc.Invoke(ctx, "/rusk.State/GetStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServer is the server API for State service.
type StateServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	ExecuteStateTransition(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error)
	VerifyStateTransition(context.Context, *VerifyStateTransitionRequest) (*VerifyStateTransitionResponse, error)
	Accept(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error)
	Finalize(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error)
	GetProvisioners(context.Context, *GetProvisionersRequest) (*GetProvisionersResponse, error)
	GetStateRoot(context.Context, *GetStateRootRequest) (*GetStateRootResponse, error)
	GetNotesOwnedBy(context.Context, *GetNotesOwnedByRequest) (*GetNotesOwnedByResponse, error)
	GetAnchor(context.Context, *GetAnchorRequest) (*GetAnchorResponse, error)
	GetOpening(context.Context, *GetOpeningRequest) (*GetOpeningResponse, error)
	GetStake(context.Context, *GetStakeRequest) (*GetStakeResponse, error)
}

// UnimplementedStateServer can be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (*UnimplementedStateServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedStateServer) ExecuteStateTransition(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStateTransition not implemented")
}
func (*UnimplementedStateServer) VerifyStateTransition(context.Context, *VerifyStateTransitionRequest) (*VerifyStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStateTransition not implemented")
}
func (*UnimplementedStateServer) Accept(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (*UnimplementedStateServer) Finalize(context.Context, *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (*UnimplementedStateServer) GetProvisioners(context.Context, *GetProvisionersRequest) (*GetProvisionersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvisioners not implemented")
}
func (*UnimplementedStateServer) GetStateRoot(context.Context, *GetStateRootRequest) (*GetStateRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateRoot not implemented")
}
func (*UnimplementedStateServer) GetNotesOwnedBy(context.Context, *GetNotesOwnedByRequest) (*GetNotesOwnedByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotesOwnedBy not implemented")
}
func (*UnimplementedStateServer) GetAnchor(context.Context, *GetAnchorRequest) (*GetAnchorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnchor not implemented")
}
func (*UnimplementedStateServer) GetOpening(context.Context, *GetOpeningRequest) (*GetOpeningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpening not implemented")
}
func (*UnimplementedStateServer) GetStake(context.Context, *GetStakeRequest) (*GetStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStake not implemented")
}

func RegisterStateServer(s *grpc.Server, srv StateServer) {
	s.RegisterService(&_State_serviceDesc, srv)
}

func _State_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_ExecuteStateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteStateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).ExecuteStateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/ExecuteStateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).ExecuteStateTransition(ctx, req.(*ExecuteStateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_VerifyStateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyStateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).VerifyStateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/VerifyStateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).VerifyStateTransition(ctx, req.(*VerifyStateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteStateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).Accept(ctx, req.(*ExecuteStateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteStateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).Finalize(ctx, req.(*ExecuteStateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetProvisioners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvisionersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetProvisioners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/GetProvisioners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetProvisioners(ctx, req.(*GetProvisionersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetStateRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetStateRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/GetStateRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetStateRoot(ctx, req.(*GetStateRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetNotesOwnedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesOwnedByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetNotesOwnedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/GetNotesOwnedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetNotesOwnedBy(ctx, req.(*GetNotesOwnedByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnchorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/GetAnchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetAnchor(ctx, req.(*GetAnchorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetOpening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpeningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetOpening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/GetOpening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetOpening(ctx, req.(*GetOpeningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rusk.State/GetStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetStake(ctx, req.(*GetStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _State_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rusk.State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _State_Echo_Handler,
		},
		{
			MethodName: "ExecuteStateTransition",
			Handler:    _State_ExecuteStateTransition_Handler,
		},
		{
			MethodName: "VerifyStateTransition",
			Handler:    _State_VerifyStateTransition_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _State_Accept_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _State_Finalize_Handler,
		},
		{
			MethodName: "GetProvisioners",
			Handler:    _State_GetProvisioners_Handler,
		},
		{
			MethodName: "GetStateRoot",
			Handler:    _State_GetStateRoot_Handler,
		},
		{
			MethodName: "GetNotesOwnedBy",
			Handler:    _State_GetNotesOwnedBy_Handler,
		},
		{
			MethodName: "GetAnchor",
			Handler:    _State_GetAnchor_Handler,
		},
		{
			MethodName: "GetOpening",
			Handler:    _State_GetOpening_Handler,
		},
		{
			MethodName: "GetStake",
			Handler:    _State_GetStake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "state.proto",
}
